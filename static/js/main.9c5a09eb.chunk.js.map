{"version":3,"sources":["components/AboutModal.js","components/Navigation.js","components/ArtistCard.js","config.js","lib/spotify.js","components/ArtistContainer.js","components/SearchBar.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["AboutModal","props","show","handleClose","Modal","size","onHide","Header","closeButton","Title","Body","href","Navigation","useState","setShow","Navbar","bg","variant","expand","Container","Col","Row","Brand","Nav","className","Link","onClick","ArtistCard","artist","Card","as","xs","name","span","offset","md","Img","src","tracks","imageUrl","alt","map","track","Text","key","id","artistName","baseApiUrl","accessToken","request","url","options","a","fetch","response","json","jsonResponse","ok","message","error","Error","getArtistName","Array","isArray","artists","length","join","getArtistId","getAlbumImageUrl","hasOwnProperty","album","images","setAccessToken","token","console","log","getPath","dest","getTracks","numSongs","recommended","headers","Authorization","slice","artistId","getArtistData","formData","ArtistContainer","setArtists","setError","isLoading","setIsLoading","updateArtists","form","useEffect","Alert","onClose","dismissible","Heading","role","aria-hidden","SearchBar","initialFormData","setFormData","handleChange","event","target","value","trim","range","keys","Form","onSubmit","preventDefault","queryString","Object","val","window","location","protocol","host","pathname","getUrl","history","pushState","path","Group","controlId","Label","Control","placeholder","defaultValue","onChange","Check","type","label","defaultChecked","checked","lg","i","Button","params","URLSearchParams","search","get","decodeURI","Content","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"oOAqDeA,EAjDI,SAACC,GAAW,IACrBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,YACd,OACE,kBAACC,EAAA,EAAD,CAAOC,KAAK,KAAKH,KAAMA,EAAMI,OAAQH,GACnC,kBAACC,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACvB,kBAACJ,EAAA,EAAMK,MAAP,eAEF,kBAACL,EAAA,EAAMM,KAAP,KACE,mHAGA,oYAMA,6BACA,2CACA,wDAC4B,uBAAGC,KAAK,6CAAR,iBAD5B,6KAKA,4CACA,yMAIA,2aAOA,qRAKA,uBAAGA,KAAK,kDAAR,iBACA,6BACA,uBAAGA,KAAK,8CAAR,0B,wCCpBOC,EAvBI,WAAO,IAAD,EACCC,oBAAS,GADV,mBAChBX,EADgB,KACVY,EADU,KAMvB,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,MACtC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACN,EAAA,EAAOO,MAAR,CAAcX,KAAK,IAAnB,aACA,kBAACY,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUC,QATH,kBAAMZ,GAAQ,KASrB,aAKR,kBAAC,EAAD,CAAYZ,KAAMA,EAAMC,YAfR,kBAAMW,GAAQ,Q,gCCuBrBa,EA3BI,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACjB,kBAACC,EAAA,EAAD,CAAMC,GAAIX,IAAWK,UAAU,QAC7B,kBAACH,EAAA,EAAD,KACE,kBAACD,EAAA,EAAD,CAAKW,GAAI,IACP,wBAAIP,UAAU,2CAA2CI,EAAOI,OAEhE,kBAACZ,EAAA,EAAD,CAAKW,GAAI,CAACE,KAAM,EAAGC,OAAQ,GAAIC,GAAI,CAACF,KAAM,EAAGC,OAAQ,IACnD,kBAACL,EAAA,EAAKO,IAAN,CACEnB,QAAQ,MACRO,UAAU,mBACVa,IAAKT,EAAOU,OAAO,GAAGC,SACtBC,IAAI,oBAGR,kBAACpB,EAAA,EAAD,CAAKW,GAAI,GAAII,GAAI,GACf,kBAACN,EAAA,EAAKnB,KAAN,KACKkB,EAAOU,OAAOG,KAAI,SAACC,GAAD,OACjB,kBAACb,EAAA,EAAKc,KAAN,CAAWnB,UAAU,YAAYoB,IAAKF,EAAMG,IAC1C,gCAASH,EAAMV,MADjB,MACmCU,EAAMI,oB,QCrB5CC,EACX,mCCCEC,EAAc,KAEZC,EAAO,uCAAG,WAAOC,EAAKC,GAAZ,mBAAAC,EAAA,0DACGD,EADH,gCAENE,MAAMH,EAAKC,GAFL,yDAGNE,MAAMH,GAHA,iCACRI,EADQ,eAIaA,EAASC,OAJtB,WAIRC,EAJQ,OAKTF,EAASG,GALA,uBAMNC,GAAsB,OAAZF,QAAY,IAAZA,OAAA,EAAAA,EAAcG,OAC5BH,EAAaG,MACb,6CACI,IAAIC,MAAMF,GATJ,iCAWPF,GAXO,4CAAH,wDAsBPK,EAAgB,SAACnB,GACrB,GAAIoB,MAAMC,QAAQrB,EAAMsB,UAAYtB,EAAMsB,QAAQC,OAAS,EACzD,OAAOvB,EAAMsB,QAAQvB,KAAI,SAACb,GAAD,OAAYA,EAAOI,QAAMkC,KAAK,OAIrDC,EAAc,SAACzB,GACnB,GAAIoB,MAAMC,QAAQrB,EAAMsB,UAAYtB,EAAMsB,QAAQC,OAAS,EACzD,OAAOvB,EAAMsB,QAAQ,GAAGnB,IAItBuB,EAAmB,SAAC1B,GAExB,OAAIA,EAAM2B,eAAe,UACvBP,MAAMC,QAAQrB,EAAM4B,MAAMC,SAC1B7B,EAAM4B,MAAMC,OAAON,OAAS,EAErBvB,EAAM4B,MAAMC,OAAO,GAAGrB,IALP,sCAYpBsB,EAAc,uCAAG,8BAAApB,EAAA,6DACfF,EADe,UACNH,EADM,oCAGIE,EAAQC,GAHZ,OAGbI,EAHa,OAInBN,EAAcM,EAASmB,MACvBC,QAAQC,IAAI3B,GALO,gDAOnB0B,QAAQf,MAAM,8BACde,QAAQf,MAAM,KAAMD,SARD,yDAAH,qDAYdkB,EAAO,uCAAG,WAAOvC,EAAKwC,GAAZ,eAAAzB,EAAA,6DACRF,EADQ,UACCH,EADD,sBACyBV,EADzB,iBACqCwC,GADrC,kBAEP5B,EAAQC,IAFD,2CAAH,wDAKP4B,EAAS,uCAAG,WAAOlD,EAAQmD,EAAUC,GAAzB,mBAAA5B,EAAA,6DACVF,EAAM8B,EAAW,qFACyDpD,EAAOiB,IADhE,6CAEiBjB,EAAOiB,GAFxB,yBADP,SAIOI,EAAQC,EArDxB,CACL+B,QAAS,CACPC,cAAc,UAAD,OAAYlC,MA+Cb,cAIVM,EAJU,OAKVhB,EAASgB,EAAShB,OALR,kBAMTA,EAAO6C,MAAM,EAAGJ,GAAUtC,KAAI,SAACC,GAAD,MACnC,CACEG,GAAIH,EAAMG,GACVb,KAAMU,EAAMV,KACZoD,SAAUjB,EAAYzB,GACtBI,WAAYe,EAAcnB,GAC1BH,SAAU6B,EAAiB1B,QAZf,2CAAH,0DAiBF2C,EAAa,uCAAG,WAAOC,GAAP,qBAAAlC,EAAA,sEACLwB,EAAQU,EAASjD,IAAKiD,EAAST,MAD1B,OACrBb,EADqB,qBAENA,GAFM,gEAEhBpC,EAFgB,kBAGHkD,EAAUlD,EAAQ0D,EAASP,SAAUO,EAASN,aAH3C,QAGzBpD,EAAOU,OAHkB,+KAKpB0B,GALoB,gEAAH,sDAQ1BQ,I,YC/Bee,EAzDS,SAACtF,GAAW,IAC1BqF,EAAarF,EAAbqF,SADyB,EAEHzE,mBAAS,IAFN,mBAE1BmD,EAF0B,KAEjBwB,EAFiB,OAGP3E,mBAAS,MAHF,mBAG1B8C,EAH0B,KAGnB8B,EAHmB,OAIC5E,oBAAS,GAJV,mBAI1B6E,EAJ0B,KAIfC,EAJe,KAM3BC,EAAa,uCAAG,WAAOC,GAAP,eAAAzC,EAAA,+EAEIiC,EAAcQ,GAFlB,OAEZ7B,EAFY,OAGlByB,EAAS,MACTD,EAAWxB,GAJO,gDAMlByB,EAAS,KAAM/B,SANG,QAQpBiC,GAAa,GARO,yDAAH,sDAkBnB,OAPAG,qBAAU,WACJR,EAASjD,KAAOiD,EAAST,OAC3Bc,GAAa,GACbC,EAAcN,MAEf,CAACA,IAGF,6BACG3B,GACC,kBAACtC,EAAA,EAAD,KACE,kBAACD,EAAA,EAAD,CAAKW,GAAI,GAAII,GAAI,IACf,kBAAC4D,EAAA,EAAD,CAAO9E,QAAQ,SAAS+E,QAAS,kBAAMP,EAAS,OAAOQ,aAAW,GAChE,kBAACF,EAAA,EAAMG,QAAP,eACA,2BAAIvC,MAKX+B,GACC,kBAACrE,EAAA,EAAD,KACE,kBAACD,EAAA,EAAD,CAAKW,GAAI,GAAII,GAAI,IACf,yBAAKX,UAAU,iCACb,yBAAKA,UAAU,iBAAiB2E,KAAK,SAASC,cAAY,aAKhEV,GAAa1B,EAAQvB,KAAI,SAAAb,GAAM,OAC/B,kBAACP,EAAA,EAAD,CAAKuB,IAAKhB,EAAOiB,IACf,kBAACzB,EAAA,EAAD,CAAKW,GAAI,GAAII,GAAI,IACf,kBAAC,EAAD,CAAYP,OAAQA,W,wCCyDjByE,EAlGG,SAACpG,GAAW,IAAD,EACKY,mBAASZ,EAAMqG,iBADpB,mBACpBhB,EADoB,KACViB,EADU,KAiBrBC,EAAe,SAACC,GACpBF,EAAY,2BACPjB,GADM,kBAERmB,EAAMC,OAAO1E,KAAOyE,EAAMC,OAAOC,MAAMC,WAItCC,EAAK,YAAO/C,MAAM,IAAIgD,QAE5B,OACE,6BACE,kBAACzF,EAAA,EAAD,KACE,kBAACD,EAAA,EAAD,CAAKI,UAAU,uBAAuBO,GAAI,GAAII,GAAI,IAChD,4DAGA,8IAMJ,kBAAC4E,EAAA,EAAD,CAAMvF,UAAU,YAAYwF,SApCX,SAACP,GACpBA,EAAMQ,iBACNhH,EAAMsG,YAAYjB,GAClB,IAAMpC,EAfK,SAACoC,GACd,IAAM4B,EAAcC,OAAOL,KAAKxB,GAAU7C,KAAI,SAACG,GAC3C,IAAMwE,EAAM9B,EAAS1C,GACrB,MAAM,GAAN,OAAUA,EAAV,YAAiBwE,MAChBlD,KAAK,KAJiB,EAKUmD,OAAOC,SAApCC,EALmB,EAKnBA,SAAUC,EALS,EAKTA,KAAMC,EALG,EAKHA,SACxB,MAAM,GAAN,OAAUF,EAAV,aAAuBC,GAAvB,OAA8BC,EAA9B,YAA0CP,GAS5BQ,CAAOpC,GACnB+B,OAAOM,QAAQC,UAAU,CAAEC,KAAM3E,GAAO,GAAIA,KAiCxC,kBAAC6D,EAAA,EAAK1F,IAAN,KACE,kBAAC0F,EAAA,EAAKe,MAAN,CAAYhG,GAAIV,IAAKW,GAAI,GAAII,GAAI,EAAGS,IAAI,YAAYmF,UAAU,aAC5D,kBAAChB,EAAA,EAAKiB,MAAN,sBACA,kBAACjB,EAAA,EAAKkB,QAAN,CACEjG,KAAK,MACLR,UAAU,QACV0G,YAAY,aACZC,aAAc7C,EAASjD,IACvB+F,SAAU5B,KAGd,kBAACO,EAAA,EAAKe,MAAN,CAAYhG,GAAIV,IAAKW,GAAI,GAAII,GAAI,EAAGS,IAAI,aAAamF,UAAU,cAC7D,kBAAChB,EAAA,EAAKiB,MAAN,2BACA,kBAACjB,EAAA,EAAKkB,QAAN,CACEjG,KAAK,OACLR,UAAU,QACV0G,YAAY,gBACZC,aAAc7C,EAAST,KACvBuD,SAAU5B,MAIhB,kBAACO,EAAA,EAAK1F,IAAN,KACE,kBAAC0F,EAAA,EAAKe,MAAN,CAAYhG,GAAIV,IAAKW,GAAI,GAAII,GAAI,GAAI4F,UAAU,eAC7C,kBAAChB,EAAA,EAAKsB,MAAN,CACErG,KAAK,cACLsG,KAAK,WACLC,MAAM,+DACNC,eAAgBlD,EAASN,YACzBoD,SA3DiB,SAAC3B,GAC5BF,EAAY,2BACPjB,GADM,kBAERmB,EAAMC,OAAO1E,KAAOyE,EAAMC,OAAO+B,gBA4DhC,kBAAC1B,EAAA,EAAK1F,IAAN,KACE,kBAAC0F,EAAA,EAAKe,MAAN,CAAYhG,GAAIV,IAAKW,GAAI,GAAII,GAAI,EAAGuG,GAAI,EAAGX,UAAU,YACnD,kBAAChB,EAAA,EAAKiB,MAAN,2CACA,kBAACjB,EAAA,EAAKkB,QAAN,CACEjG,KAAK,WACLF,GAAG,SACHqG,aAAc7C,EAASP,SACvBqD,SAAU5B,GAETK,EAAMpE,KAAI,SAAAkG,GAAC,OAAI,4BAAQ/F,IAAK+F,GAAIA,EAAI,SAI3C,kBAAC5B,EAAA,EAAK1F,IAAN,CAAUG,UAAU,SAClB,kBAACuF,EAAA,EAAKe,MAAN,CAAYhG,GAAIV,IAAKW,GAAI,EAAGI,GAAI,EAAGuG,GAAI,GACrC,kBAACE,EAAA,EAAD,CAAQ3H,QAAQ,UAAUqH,KAAK,UAA/B,kBC/FNO,EAAS,IAAIC,gBAAgBzB,OAAOC,SAASyB,QAE7CzC,EAAmB,CACvB,IAAOuC,EAAOG,IAAI,QAAUC,UAAUJ,EAAOG,IAAI,QACjD,KAAQH,EAAOG,IAAI,SAAWC,UAAUJ,EAAOG,IAAI,SACnD,YAA6C,SAA9BH,EAAOG,IAAI,iBAA6B,EACvD,SAAYH,EAAOG,IAAI,aAAe,GAezBE,EAZC,WAAO,IAAD,EACYrI,mBAASyF,GADrB,mBACbhB,EADa,KACHiB,EADG,KAGpB,OACE,kBAACpF,EAAA,EAAD,KACE,kBAAC,EAAD,CAAWoF,YAAaA,EAAaD,gBAAiBA,IACtD,kBAAC,EAAD,CAAiBhB,SAAUA,MCPlB6D,EAPH,kBACV,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGgBC,QACW,cAA7B/B,OAAOC,SAAS+B,UAEe,UAA7BhC,OAAOC,SAAS+B,UAEhBhC,OAAOC,SAAS+B,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvG,GACLe,QAAQf,MAAMA,EAAMD,c","file":"static/js/main.9c5a09eb.chunk.js","sourcesContent":["\nimport React from 'react';\nimport { Modal } from 'react-bootstrap';\n\nconst AboutModal = (props) => {\n  const { show, handleClose } = props;\n  return (\n    <Modal size=\"xl\" show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>About</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <h5>\n          Spotipath lets you explore how closely related your favorite artists are on Spotify\n        </h5>\n        <p>\n          When you fill out the form it'll find a path between the two artists you entered using \n          the Spotify API's related artists. Then it'll generate a playlist with songs either \n          either by the artists that are in that path or songs that Spotify would recommend to you\n          based on those artists. You can specify the number of songs per artists included in the playlist. \n        </p>\n        <hr /> \n        <h4>Inspiration</h4>\n        <p>\n          Spotipath was inspired by <a href=\"http://boilthefrog.playlistmachinery.com/\">Boil the Frog</a>.\n          I thought it was a really cool way of using the Spotify API and decided I wanted to try my hand \n          at recreating it and maybe figuring out a way to put my own spin on it. \n        </p>\n        <h4>How it works</h4>\n        <p>\n          I pre-fetched artist data for roughly 16,000 artists (this includes their related artists) and stored \n          it in a database. The path finding algorithm uses bidirectional BFS. \n        </p>\n        <p>\n          When a request is made for a path \n          between two artists, the algorithm visits those artists' related artists, and their related artists' \n          related artists, and so on. When an artist is encountered that was already encountered by the scan starting\n          at the other artist, the algorithm terminates. The algorithm backtracks down the visited path back \n          to each of the starting artists and returns that path.\n        </p>\n        <p>\n          On the client side, the Spotify API is used to fetch these artists' top songs and album covers. This \n          is done client side to reduce load on the server, since the pathfinding is pretty resource intensive.\n          To find out more, check the code on GitHub:\n        </p>\n        <a href=\"https://github.com/kristiancharb/spotipath-app\">Spotipath API</a>\n        <br />\n        <a href=\"https://github.com/kristiancharb/spotipath\">Spotipath React App</a>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default AboutModal;\n","import React, { useState } from 'react';\nimport AboutModal from './AboutModal';\nimport { Container, Row, Col, Navbar, Nav } from 'react-bootstrap';\n\nconst Navigation = () => {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n      <Container>\n        <Col>\n          <Row>\n            <Navbar.Brand href=\"\">Spotipath</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n              <Nav.Link onClick={handleShow}>About</Nav.Link>\n            </Nav>\n          </Row>\n        </Col>\n      </Container>\n      <AboutModal show={show} handleClose={handleClose} />\n    </Navbar>\n  );\n};\n\nexport default Navigation;","import React from 'react';\nimport { Container, Row, Col, Card} from 'react-bootstrap';\n\nconst ArtistCard = ({ artist }) => (\n  <Card as={Container} className=\"mt-3\">\n    <Row>\n      <Col xs={12}>\n        <h3 className=\"text-dark text-center text-md-left my-2\">{artist.name}</h3>\n      </Col>\n        <Col xs={{span: 8, offset: 2}} md={{span: 4, offset: 0}}>\n          <Card.Img\n            variant=\"top\"\n            className=\"m-auto pt-2 pb-2\"\n            src={artist.tracks[0].imageUrl} \n            alt=\"Card image cap\" \n          />\n        </Col>\n        <Col xs={12} md={8}>\n          <Card.Body>\n              {artist.tracks.map((track) => (\n                <Card.Text className=\"text-dark\" key={track.id}>\n                  <strong>{track.name}</strong> - {track.artistName}\n                </Card.Text>\n              ))}\n          </Card.Body>\n        </Col>\n    </Row>\n  </Card>\n);\n\nexport default ArtistCard","export const baseApiUrl = process.env.NODE_ENV === 'production' ? \n  'https://www.kristiancharb.online' :\n  'http://127.0.0.1:5000'","import { baseApiUrl } from '../config';\n\nlet accessToken = null;\n\nconst request = async (url, options) => {\n  const response = options ?\n    await fetch(url, options) :\n    await fetch(url); \n  const jsonResponse = await response.json();\n  if (!response.ok) {\n    const message = jsonResponse?.error ?\n      jsonResponse.error :\n      'An error occurred. Please try again later.' \n    throw new Error(message);\n  }\n  return jsonResponse;\n}\n\nconst getSpotifyHeaders = () => {\n  return { \n    headers: { \n      Authorization: `Bearer ${accessToken}`\n    }\n  };\n}\n\nconst getArtistName = (track) => {\n  if (Array.isArray(track.artists) && track.artists.length > 0) {\n    return track.artists.map((artist) => artist.name).join(', ');\n  }\n}\n\nconst getArtistId = (track) => {\n  if (Array.isArray(track.artists) && track.artists.length > 0) {\n    return track.artists[0].id;\n  }\n}\n\nconst getAlbumImageUrl = (track) => {\n  const defaultImageUrl = 'http://via.placeholder.com/300x180';\n  if (track.hasOwnProperty('album') && \n    Array.isArray(track.album.images) &&\n    track.album.images.length > 0\n  ) {\n    return track.album.images[0].url;\n  } else {\n    return defaultImageUrl;\n  }\n}\n\n\nconst setAccessToken = async () => {\n  const url = `${baseApiUrl}/access-token/`\n  try {\n    const response = await request(url);\n    accessToken = response.token;\n    console.log(accessToken);\n  } catch (error) {\n    console.error('Failed to get access token');\n    console.error(error.message);\n  }\n}\n\nconst getPath = async (src, dest) => {\n  const url = `${baseApiUrl}/path/?src=${src}&dest=${dest}`;\n  return request(url)\n}\n\nconst getTracks = async (artist, numSongs, recommended) => {\n  const url = recommended ? \n    `https://api.spotify.com/v1/recommendations?limit=10&market=US&seed_artists=${artist.id}` :\n    `https://api.spotify.com/v1/artists/${artist.id}/top-tracks?market=US`;\n  const response = await request(url, getSpotifyHeaders());\n  const tracks = response.tracks;\n  return tracks.slice(0, numSongs).map((track) => (\n    {\n      id: track.id,\n      name: track.name,\n      artistId: getArtistId(track),\n      artistName: getArtistName(track),\n      imageUrl: getAlbumImageUrl(track),\n    }\n  ));\n}\n\nexport const getArtistData = async (formData) => {\n  const artists = await getPath(formData.src, formData.dest);\n  for (const artist of artists) {\n    artist.tracks = await getTracks(artist, formData.numSongs, formData.recommended);\n  }\n  return artists;\n}\n\nsetAccessToken();\n","import React, { useState, useEffect } from 'react';\nimport ArtistCard from './ArtistCard';\nimport { getArtistData } from '../lib/spotify';\nimport { Row, Col, Alert } from 'react-bootstrap';\n\nconst ArtistContainer = (props) => {\n  const { formData } = props; \n  const [artists, setArtists] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const updateArtists = async (form) => {\n    try {\n      const artists = await getArtistData(form);\n      setError(null);\n      setArtists(artists);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }\n\n  useEffect(() => {\n    if (formData.src && formData.dest) {\n      setIsLoading(true);\n      updateArtists(formData);\n    }\n  }, [formData]);\n\n  return (\n    <div>\n      {error && \n        <Row>\n          <Col xs={12} md={10}>\n            <Alert variant=\"danger\" onClose={() => setError(null)} dismissible>\n              <Alert.Heading>Uh oh!</Alert.Heading>\n              <p>{error}</p>\n            </Alert>\n          </Col>\n        </Row>\n      }\n      {isLoading && \n        <Row>\n          <Col xs={12} md={10}>\n            <div className=\"d-flex justify-content-center\">\n              <div className=\"spinner-border\" role=\"status\" aria-hidden=\"true\"></div>\n            </div>\n          </Col>\n        </Row>\n      }\n      {!isLoading && artists.map(artist => (\n        <Row key={artist.id}>\n          <Col xs={12} md={10}>\n            <ArtistCard artist={artist}/>\n          </Col>\n        </Row>\n      ))\n      }\n    </div>\n  );\n}\n\nexport default ArtistContainer;","import React, { useState } from 'react';\nimport { Row, Col, Form, Button} from 'react-bootstrap';\n\nconst getUrl = (formData) => {\n  const queryString = Object.keys(formData).map((key) => { \n      const val = formData[key];\n      return `${key}=${val}`;\n    }).join('&');\n  const { protocol, host, pathname } = window.location;\n  return `${protocol}//${host}${pathname}?${queryString}`\n};\n\nconst SearchBar = (props) => {\n  const [formData, setFormData] = useState(props.initialFormData);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    props.setFormData(formData);\n    const url = getUrl(formData);\n    window.history.pushState({ path: url }, '', url);\n  };\n\n  const handleCheckBoxChange = (event) => {\n    setFormData({\n      ...formData,\n      [event.target.name]: event.target.checked\n    });\n  };\n  \n  const handleChange = (event) => {\n    setFormData({\n      ...formData,\n      [event.target.name]: event.target.value.trim()\n    });\n  };\n\n  const range = [...Array(10).keys()];\n\n  return (\n    <div>\n      <Row>\n        <Col className=\"text-dark w-100 my-4\" xs={12} md={10}>\n          <h4> \n            Enter two artists on Spotify\n          </h4>\n          <h5>\n            We'll find a path between them through related artists and generate\n            a playlist for you with their top songs.\n          </h5>\n        </Col>\n      </Row>\n      <Form className=\"text-dark\" onSubmit={handleSubmit}>\n        <Form.Row>\n          <Form.Group as={Col} xs={12} md={5} key=\"srcArtist\" controlId=\"srcArtist\">\n            <Form.Label>Source Artist</Form.Label>\n            <Form.Control \n              name=\"src\" \n              className=\"w-100\" \n              placeholder=\"Kanye West\"\n              defaultValue={formData.src}\n              onChange={handleChange}\n            />\n          </Form.Group>\n          <Form.Group as={Col} xs={12} md={5} key=\"destArtist\" controlId=\"destArtist\">\n            <Form.Label>Destination Artist</Form.Label>\n            <Form.Control \n              name=\"dest\" \n              className=\"w-100\" \n              placeholder=\"Elvis Presley\"\n              defaultValue={formData.dest}\n              onChange={handleChange}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} xs={12} md={10} controlId=\"recommended\">\n            <Form.Check \n              name=\"recommended\"\n              type=\"checkbox\" \n              label=\"Add recommended songs by artists not necessarily in the path\"\n              defaultChecked={formData.recommended}\n              onChange={handleCheckBoxChange}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} xs={12} md={5} lg={5} controlId=\"numSongs\">\n            <Form.Label>Maximum number of songs per artist</Form.Label>\n            <Form.Control \n              name=\"numSongs\" \n              as=\"select\"\n              defaultValue={formData.numSongs}\n              onChange={handleChange}\n            >\n              {range.map(i => <option key={i}>{i + 1}</option>)}\n            </Form.Control>\n          </Form.Group>\n        </Form.Row>\n        <Form.Row className=\"w-100\">\n          <Form.Group as={Col} xs={4} md={3} lg={2}>\n            <Button variant=\"primary\" type=\"submit\">\n              Find Path\n            </Button>\n          </Form.Group>\n        </Form.Row>\n      </Form>\n    </div>\n  );\n};\n\nexport default SearchBar;","import React, { useState } from 'react';\nimport ArtistContainer from './ArtistContainer';\nimport SearchBar from './SearchBar';\nimport { Container } from 'react-bootstrap';\n\nconst params = new URLSearchParams(window.location.search);\n\nconst initialFormData =  {\n  'src': params.get('src') && decodeURI(params.get('src')),\n  'dest': params.get('dest') && decodeURI(params.get('dest')),\n  'recommended': params.get('recommended') === 'true' || false,\n  'numSongs': params.get('numSongs') || 1,\n}\n\nconst Content = () => {\n  const [formData, setFormData] = useState(initialFormData);\n\n  return (  \n    <Container>\n      <SearchBar setFormData={setFormData} initialFormData={initialFormData}/>\n      <ArtistContainer formData={formData} />\n    </Container>\n  );\n}\n\n\nexport default Content;","import React from 'react';\nimport './scss/App.scss'\nimport Navigation from './components/Navigation'\nimport Content from './components/Content'\n\n\nconst App = () => (\n  <div>\n    <Navigation />\n    <Content />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}