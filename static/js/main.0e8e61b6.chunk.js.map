{"version":3,"sources":["components/Navigation.js","components/ArtistCard.js","config.js","lib/spotify.js","components/ArtistContainer.js","components/SearchBar.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","Navbar","bg","variant","expand","Container","Col","Row","Brand","href","Nav","className","Link","ArtistCard","artist","Card","as","xs","name","span","offset","md","Img","src","tracks","imageUrl","alt","Body","map","track","Text","key","id","artistName","baseApiUrl","accessToken","request","url","options","a","fetch","response","json","jsonResponse","ok","message","error","Error","getArtistName","Array","isArray","artists","length","join","getArtistId","getAlbumImageUrl","hasOwnProperty","album","images","setAccessToken","token","console","log","getPath","dest","getTracks","numSongs","recommended","headers","Authorization","slice","artistId","getArtistData","formData","ArtistContainer","props","useState","setArtists","setError","isLoading","setIsLoading","updateArtists","form","useEffect","Alert","onClose","dismissible","Heading","role","aria-hidden","SearchBar","initialFormData","setFormData","handleChange","event","target","value","trim","range","keys","Form","onSubmit","preventDefault","queryString","Object","val","window","location","protocol","host","pathname","getUrl","history","pushState","path","Group","controlId","Label","Control","placeholder","defaultValue","onChange","Check","type","label","defaultChecked","checked","lg","i","Button","params","URLSearchParams","search","get","Content","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0e8e61b6.chunk.js","sourcesContent":["import React from 'react';\nimport { Container, Row, Col, Navbar, Nav} from 'react-bootstrap';\n\nconst Navigation = () => (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n    <Container>\n      <Col>\n        <Row>\n          <Navbar.Brand href=\"#home\">Spotipath</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#about\">About</Nav.Link>\n          </Nav>\n        </Row>\n      </Col>\n    </Container>\n  </Navbar>\n);\n\nexport default Navigation;","import React from 'react';\nimport { Container, Row, Col, Card} from 'react-bootstrap';\n\nconst ArtistCard = ({ artist }) => (\n  <Card as={Container} className=\"mt-3\">\n    <Row>\n      <Col xs={12}>\n        <h3 className=\"text-dark text-center text-md-left my-2\">{artist.name}</h3>\n      </Col>\n        <Col xs={{span: 8, offset: 2}} md={{span: 4, offset: 0}}>\n          <Card.Img\n            variant=\"top\"\n            className=\"m-auto pt-2 pb-2\"\n            src={artist.tracks[0].imageUrl} \n            alt=\"Card image cap\" \n          />\n        </Col>\n        <Col xs={12} md={8}>\n          <Card.Body>\n              {artist.tracks.map((track) => (\n                <Card.Text className=\"text-dark\" key={track.id}>\n                  <strong>{track.name}</strong> - {track.artistName}\n                </Card.Text>\n              ))}\n          </Card.Body>\n        </Col>\n    </Row>\n  </Card>\n);\n\nexport default ArtistCard","export const baseApiUrl = process.env.NODE_ENV === 'production' ? \n  'https://www.kristiancharb.online' :\n  'http://127.0.0.1:5000'","import { baseApiUrl } from '../config';\n\nlet accessToken = null;\n\nconst request = async (url, options) => {\n  const response = options ?\n    await fetch(url, options) :\n    await fetch(url); \n  const jsonResponse = await response.json();\n  if (!response.ok) {\n    const message = jsonResponse?.error ?\n      jsonResponse.error :\n      'An error occurred. Please try again later.' \n    throw new Error(message);\n  }\n  return jsonResponse;\n}\n\nconst getSpotifyHeaders = () => {\n  return { \n    headers: { \n      Authorization: `Bearer ${accessToken}`\n    }\n  };\n}\n\nconst getArtistName = (track) => {\n  if (Array.isArray(track.artists) && track.artists.length > 0) {\n    return track.artists.map((artist) => artist.name).join(', ');\n  }\n}\n\nconst getArtistId = (track) => {\n  if (Array.isArray(track.artists) && track.artists.length > 0) {\n    return track.artists[0].id;\n  }\n}\n\nconst getAlbumImageUrl = (track) => {\n  const defaultImageUrl = 'http://via.placeholder.com/300x180';\n  if (track.hasOwnProperty('album') && \n    Array.isArray(track.album.images) &&\n    track.album.images.length > 0\n  ) {\n    return track.album.images[0].url;\n  } else {\n    return defaultImageUrl;\n  }\n}\n\n\nconst setAccessToken = async () => {\n  const url = `${baseApiUrl}/access-token/`\n  try {\n    const response = await request(url);\n    accessToken = response.token;\n    console.log(accessToken);\n  } catch (error) {\n    console.error('Failed to get access token');\n    console.error(error.message);\n  }\n}\n\nconst getPath = async (src, dest) => {\n  const url = `${baseApiUrl}/path/?src=${src}&dest=${dest}`;\n  return request(url)\n}\n\nconst getTracks = async (artist, numSongs, recommended) => {\n  const url = recommended ? \n    `https://api.spotify.com/v1/recommendations?limit=10&market=US&seed_artists=${artist.id}` :\n    `https://api.spotify.com/v1/artists/${artist.id}/top-tracks?market=US`;\n  const response = await request(url, getSpotifyHeaders());\n  const tracks = response.tracks;\n  return tracks.slice(0, numSongs).map((track) => (\n    {\n      id: track.id,\n      name: track.name,\n      artistId: getArtistId(track),\n      artistName: getArtistName(track),\n      imageUrl: getAlbumImageUrl(track),\n    }\n  ));\n}\n\nexport const getArtistData = async (formData) => {\n  const artists = await getPath(formData.src, formData.dest);\n  for (const artist of artists) {\n    artist.tracks = await getTracks(artist, formData.numSongs, formData.recommended);\n  }\n  return artists;\n}\n\nsetAccessToken();\n","import React, { useState, useEffect } from 'react';\nimport ArtistCard from './ArtistCard';\nimport { getArtistData } from '../lib/spotify';\nimport { Row, Col, Alert } from 'react-bootstrap';\n\nconst ArtistContainer = (props) => {\n  const { formData } = props; \n  const [artists, setArtists] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const updateArtists = async (form) => {\n    try {\n      const artists = await getArtistData(form);\n      setError(null);\n      setArtists(artists);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }\n\n  useEffect(() => {\n    if (formData.src && formData.dest) {\n      setIsLoading(true);\n      updateArtists(formData);\n    }\n  }, [formData]);\n\n  return (\n    <div>\n      {error && \n        <Row>\n          <Col xs={12} md={10}>\n            <Alert variant=\"danger\" onClose={() => setError(null)} dismissible>\n              <Alert.Heading>Uh oh!</Alert.Heading>\n              <p>{error}</p>\n            </Alert>\n          </Col>\n        </Row>\n      }\n      {isLoading && \n        <Row>\n          <Col xs={12} md={10}>\n            <div className=\"d-flex justify-content-center\">\n              <div className=\"spinner-border\" role=\"status\" aria-hidden=\"true\"></div>\n            </div>\n          </Col>\n        </Row>\n      }\n      {!isLoading && artists.map(artist => (\n        <Row key={artist.id}>\n          <Col xs={12} md={10}>\n            <ArtistCard artist={artist}/>\n          </Col>\n        </Row>\n      ))\n      }\n    </div>\n  );\n}\n\nexport default ArtistContainer;","import React, { useState } from 'react';\nimport { Row, Col, Form, Button} from 'react-bootstrap';\n\nconst getUrl = (formData) => {\n  const queryString = Object.keys(formData).map((key) => { \n      const val = formData[key];\n      return `${key}=${val}`;\n    }).join('&');\n  const { protocol, host, pathname } = window.location;\n  return `${protocol}//${host}${pathname}?${queryString}`\n};\n\nconst SearchBar = (props) => {\n  const [formData, setFormData] = useState(props.initialFormData);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    props.setFormData(formData);\n    const url = getUrl(formData);\n    window.history.pushState({ path: url }, '', url);\n  };\n\n  const handleCheckBoxChange = (event) => {\n    setFormData({\n      ...formData,\n      [event.target.name]: event.target.checked\n    });\n  };\n  \n  const handleChange = (event) => {\n    setFormData({\n      ...formData,\n      [event.target.name]: event.target.value.trim()\n    });\n  };\n\n  const range = [...Array(10).keys()];\n\n  return (\n    <div>\n      <Row>\n        <Col className=\"text-dark w-100 my-4\" xs={12} md={10}>\n          <h4> \n            Enter two artists on Spotify\n          </h4>\n          <h5>\n            We'll find a path between them through related artists and generate\n            a playlist for you with their top songs.\n          </h5>\n        </Col>\n      </Row>\n      <Form className=\"text-dark\" onSubmit={handleSubmit}>\n        <Form.Row>\n          <Form.Group as={Col} xs={12} md={5} key=\"srcArtist\" controlId=\"srcArtist\">\n            <Form.Label>Source Artist</Form.Label>\n            <Form.Control \n              name=\"src\" \n              className=\"w-100\" \n              placeholder=\"Kanye West\"\n              defaultValue={formData.src}\n              onChange={handleChange}\n            />\n          </Form.Group>\n          <Form.Group as={Col} xs={12} md={5} key=\"destArtist\" controlId=\"destArtist\">\n            <Form.Label>Destination Artist</Form.Label>\n            <Form.Control \n              name=\"dest\" \n              className=\"w-100\" \n              placeholder=\"Elvis Presley\"\n              defaultValue={formData.dest}\n              onChange={handleChange}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} xs={12} md={10} controlId=\"recommended\">\n            <Form.Check \n              name=\"recommended\"\n              type=\"checkbox\" \n              label=\"Add recommended songs by artists not necessarily in the path\"\n              defaultChecked={formData.recommended}\n              onChange={handleCheckBoxChange}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} xs={12} md={5} lg={5} controlId=\"numSongs\">\n            <Form.Label>Maximum number of songs per artist</Form.Label>\n            <Form.Control \n              name=\"numSongs\" \n              as=\"select\"\n              defaultValue={formData.numSongs}\n              onChange={handleChange}\n            >\n              {range.map(i => <option key={i}>{i + 1}</option>)}\n            </Form.Control>\n          </Form.Group>\n        </Form.Row>\n        <Form.Row className=\"w-100\">\n          <Form.Group as={Col} xs={4} md={3} lg={2}>\n            <Button variant=\"primary\" type=\"submit\">\n              Find Path\n            </Button>\n          </Form.Group>\n        </Form.Row>\n      </Form>\n    </div>\n  );\n};\n\nexport default SearchBar;","import React, { useState } from 'react';\nimport ArtistContainer from './ArtistContainer';\nimport SearchBar from './SearchBar';\nimport { Container } from 'react-bootstrap';\n\nconst params = new URLSearchParams(window.location.search);\n\nconst initialFormData =  {\n  'src': params.get('src'),\n  'dest': params.get('dest'),\n  'recommended': params.get('recommended') === 'true' || false,\n  'numSongs': params.get('numSongs') || 1,\n}\n\nconst Content = () => {\n  const [formData, setFormData] = useState(initialFormData);\n\n  return (  \n    <Container>\n      <SearchBar setFormData={setFormData} initialFormData={initialFormData}/>\n      <ArtistContainer formData={formData} />\n    </Container>\n  );\n}\n\n\nexport default Content;","import React from 'react';\nimport './scss/App.scss'\nimport Navigation from './components/Navigation'\nimport Content from './components/Content'\n\n\nconst App = () => (\n  <div>\n    <Navigation />\n    <Content />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}