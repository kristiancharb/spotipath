{"version":3,"sources":["components/Navigation.js","components/ArtistCard.js","lib/artists.js","config.js","components/ArtistContainer.js","components/SearchBar.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","Navbar","bg","variant","expand","Container","Col","Row","Brand","href","Nav","className","Link","ArtistCard","artist","Card","xs","Img","src","alt","Body","Title","name","Text","fetchArtists","dest","a","url","fetch","response","json","ArtistContainer","props","artistData","useState","artists","setArtists","useEffect","updateArtists","map","key","id","md","SearchBar","formData","setFormData","handleChange","event","target","value","trim","Form","inline","onSubmit","preventDefault","setArtistData","console","log","lg","Group","controlId","Label","Control","placeholder","onChange","Button","type","Content","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.502b0ed3.chunk.js","sourcesContent":["import React from 'react';\nimport { Container, Row, Col, Navbar, Nav} from 'react-bootstrap';\n\nconst Navigation = () => (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n    <Container>\n      <Col>\n        <Row>\n          <Navbar.Brand href=\"#home\">Spotipath</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#about\">About</Nav.Link>\n          </Nav>\n        </Row>\n      </Col>\n    </Container>\n  </Navbar>\n);\n\nexport default Navigation;","import React from 'react';\nimport { Container, Row, Col, Card} from 'react-bootstrap';\n\nconst ArtistCard = ({ artist }) => (\n  <Card className=\"mt-3\">\n    <Container>\n      <Row>\n        <Col xs={4}>\n          <Card.Img \n            variant=\"top\"\n            className=\"pt-2 pb-2\"\n            src=\"http://via.placeholder.com/300x180\" \n            alt=\"Card image cap\" \n          />\n        </Col>\n        <Col xs={8}>\n          <Card.Body>\n            <Card.Title>{artist.name}</Card.Title>\n            <Card.Text>\n              Some quick example text to build on the card title and make up the bulk of\n              the card's content.\n            </Card.Text>\n          </Card.Body>\n        </Col>\n      </Row>\n    </Container>\n  </Card>\n);\n\nexport default ArtistCard","import { baseApiUrl } from '../config';\n\nexport const fetchArtists = async (src, dest) => {\n  const url = `${baseApiUrl}/path/?src=${src}&dest=${dest}`;\n  const response = await fetch(url); \n  return await response.json();\n}","// TODO: add prod URL\n\nexport const baseApiUrl = process.env.NODE_ENV === 'production' ? \n  '' :\n  'http://127.0.0.1:5000'","import React, { useState, useEffect } from 'react';\nimport ArtistCard from './ArtistCard';\nimport { fetchArtists } from '../lib/artists';\nimport { Row, Col } from 'react-bootstrap';\n\nconst ArtistContainer = (props) => {\n  const { artistData } = props; \n  const [artists, setArtists] = useState([]);\n\n  useEffect(() => {\n    if (artistData.src && artistData.dest) {\n      const updateArtists = async () => {\n        const artists = await fetchArtists(artistData.src, artistData.dest);\n        setArtists(artists);\n      }\n      updateArtists();\n    }\n  }, [artistData.src, artistData.dest]);\n\n  return (\n    <div>\n      {artists.map(artist => (\n        <Row key={artist.id}>\n          <Col xs={12} md={10}>\n            <ArtistCard artist={artist}/>\n          </Col>\n        </Row>\n      ))}\n    </div>\n  );\n}\n\nexport default ArtistContainer;","import React, { useState } from 'react';\nimport { Row, Col, Form, Button} from 'react-bootstrap';\n\nconst SearchBar = (props) => {\n  const [formData, setFormData] = useState({\n    'src': null,\n    'dest': null\n  });\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    props.setArtistData(formData);\n    console.log(formData);\n  }\n  \n  const handleChange = (event) => {\n    setFormData({\n      ...formData,\n      [event.target.name]: event.target.value.trim()\n    });\n  }\n\n  return (\n    <div>\n      <Row>\n        <Col className=\"w-100 my-4\" xs={12} md={10}>\n          <h5> \n            Enter two artists from (almost) all Spotify artists and we'll find a path\n            between them through their related artists.\n          </h5>\n        </Col>\n      </Row>\n      <Row>\n        <Form inline className=\"w-100\" onSubmit={handleSubmit}>\n          <Col xs={12} md={5} lg={4}>\n            <Form.Group key=\"srcArtist\" controlId=\"srcArtist\">\n              <Form.Label className=\"sr-only\">Starting Artist</Form.Label>\n              <Form.Control name=\"src\" className=\"my-2 w-100\" placeholder=\"Artist Name\" onChange={handleChange}/>\n            </Form.Group>\n          </Col>\n          <Col xs={12} md={5} lg={4}>\n            <Form.Group key=\"destArtist\" controlId=\"destArtist\">\n              <Form.Label className=\"sr-only\">Ending Artist</Form.Label>\n              <Form.Control name=\"dest\" className=\"my-2 w-100\" placeholder=\"Artist Name\" onChange={handleChange}/>\n            </Form.Group>\n          </Col>\n          <Col xs={12} md={10} lg={2}>\n            <Button className=\"my-2 w-100\" variant=\"primary\" type=\"submit\">\n              Find Path\n            </Button>\n          </Col>\n        </Form>\n      </Row>\n    </div>\n  );\n}\n\nexport default SearchBar;","import React, { useState } from 'react';\nimport ArtistContainer from './ArtistContainer';\nimport SearchBar from './SearchBar';\nimport { Container } from 'react-bootstrap';\n\nconst Content = () => {\n  const [artistData, setArtistData] = useState({ src: null, dest: null });\n\n  return (  \n    <Container>\n      <SearchBar setArtistData={setArtistData} />\n      <ArtistContainer artistData={artistData} />\n    </Container>\n  );\n}\n\n\nexport default Content;","import React from 'react';\nimport './scss/App.scss'\nimport Navigation from './components/Navigation'\nimport Content from './components/Content'\n\n\nconst App = () => (\n  <div>\n    <Navigation />\n    <Content />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}